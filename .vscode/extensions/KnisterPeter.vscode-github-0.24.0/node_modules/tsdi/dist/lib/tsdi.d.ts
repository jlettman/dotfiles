import 'reflect-metadata';
export declare type Constructable<T> = {
    new (...args: any[]): T;
};
export declare type IComponentOptions = ComponentOptions;
export interface ComponentOptions {
    name?: string;
    singleton?: boolean;
    eager?: boolean;
}
export declare type IInjectOptions = InjectOptions;
export interface InjectOptions {
    name?: string;
    lazy?: boolean;
}
export declare type IFactoryOptions = FactoryOptions;
export interface FactoryOptions {
    name?: string;
    singleton?: boolean;
    eager?: boolean;
}
export declare type Mutable<T extends {
    [x: string]: any;
}, K extends string> = {
    [P in K]: T[P];
};
export declare type Mock<T> = Mutable<T, keyof T>;
export interface LifecycleListener {
    onCreate?(component: any): void;
    onDestroy?(component: any): void;
}
export declare class TSDI {
    private autoMock;
    private components;
    private instances;
    private listener;
    private properties;
    private lifecycleListeners;
    constructor();
    addLifecycleListener(lifecycleListener: LifecycleListener): void;
    private notifyOnCreate(component);
    private notifyOnDestroy(component);
    addProperty(key: string, value: any): void;
    close(): void;
    enableComponentScanner(): void;
    enableAutomock(...allowedDependencies: any[]): void;
    private registerComponent(componentMetadata);
    register(component: Constructable<any>, name?: string): void;
    private getComponentMetadataIndex(component, name?);
    private isComponentMetadataIndexFromComponentOrFactory(component, metadata);
    private throwComponentNotFoundError(component, name);
    private getConstructorParameters(metadata);
    private isSingleton(metadata);
    private getOrCreate<T>(metadata, idx);
    configureExternal<T>(args: any[], target: any): T;
    private injectIntoInstance(instance, componentMetadata);
    private injectDependency(instance, inject);
    private injectAutoMock(instance, inject);
    private createAutoMock<T>(constructor);
    mock<T>(component: Constructable<T>): Mock<T>;
    private getInjectComponentMetadata(inject);
    private getComponentDependency(inject);
    private checkAndThrowDependencyError(inject);
    get<T>(componentOrHint: string | Constructable<T>): T;
    get<T>(component: Constructable<T>, hint: string): T;
    override(component: Constructable<any>, override: any): void;
}
export { component, Component } from './component';
export { external, External } from './external';
export { inject, Inject } from './inject';
export { initialize, Initialize } from './initialize';
export { destroy, Destroy } from './destroy';
export { factory, Factory } from './factory';
